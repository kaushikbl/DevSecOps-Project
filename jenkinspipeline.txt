pipeline {
    agent any
    tools {
        jdk 'jdk17'
           nodejs 'node16'
        }
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'github-jenkins', url: 'https://github.com/kaushikbl/DevSecOps-Project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix'''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-jenkins'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
    
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker-jenkins') { 
                       
                       buildNumber = "${BUILD_NUMBER}"

                       sh "sudo chmod 666 /var/run/docker.sock"

                       sh "docker build --build-arg TMDB_V3_API_KEY=489362a14e0518180c51d1392ba8a3da -t kaushikbl/netflix:${buildNumber} ."
                    
                       sh "docker push kaushikbl/netflix:${buildNumber}"
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image kaushikbl/netflix:${buildNumber} > trivyimage.txt" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh "docker run -d -p 8081:80 kaushikbl/netflix:${buildNumber}"
            }
        }
    }